package DDGC::App::PoGenerator;

use Moose;
use DDGC;
use File::Spec;
use IO::All -utf8;

with qw(
	MooseX::Getopt
);

has targetdir => (
	isa => 'Str',
	is => 'ro',
	required => 1,
);

has domain => (
	isa => 'Str',
	is => 'ro',
	predicate => 'has_domain',
);

has alldomain => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 0 },
);

has auto => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 1 },
);

has fallback => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 1 },
);

has _ddgc => (
	traits => [qw( NoGetopt )],
	isa => 'DDGC',
	is => 'ro',
	default => sub { DDGC->new },
);
sub d { shift->_ddgc }

has _dir => (
	traits => [qw( NoGetopt )],
	isa => 'Str',
	is => 'ro',
	lazy_build => 1,
);
sub dir { shift->_dir }

sub _build__dir {
	my ( $self ) = @_;
	return $self->targetdir if File::Spec->file_name_is_absolute($self->targetdir);
	return File::Spec->rel2abs($self->targetdir);
}

sub BUILD {
	my ( $self ) = @_;
	$self->error($self->_dir." is not writeable") unless -w $self->_dir;
	if ($self->has_domain) {
		$self->error("got domain and alldomain at once") if $self->alldomain;
		my $tc = $self->d->rs('Token::Domain')->search({ key => $self->domain })->first;
		$self->error("no domain found") unless $tc;
		$self->generate_pos_for_domain($tc,$self->dir);
	} elsif ($self->alldomain) {
		for ($self->d->rs('Token::Domain')->search({})->all) {
			my $dir = $self->dir.'/'.$_->key;
			mkdir($dir) unless -d $dir;
			$self->error($dir." is not writeable") unless -w $dir;
			$self->generate_pos_for_domain($_,$dir);
		}
	} else {
		$self->error("no domain given and no alldomain")
	}
}

sub generate_pos_for_domain {
	my ( $self, $token_domain, $dir ) = @_;
	for my $tcl ($token_domain->token_domain_languages->all) {
		$self->generate_po_for_locale($tcl,$dir);
	}
}

sub generate_po_for_locale {
	my ( $self, $token_domain_language, $dir ) = @_;
	my $locale = $token_domain_language->language->locale;
	my $time = time;
	my $ref = ref $self;
	my $lang = $token_domain_language->language->name_in_english;
	my $plural_forms = $token_domain_language->language->plural_forms;
	mkdir($dir.'/'.$locale) if !-d $dir.'/'.$locale;
	mkdir($dir.'/'.$locale.'/LC_MESSAGES') if !-d $dir.'/'.$locale.'/LC_MESSAGES';
	my $file = io($dir.'/'.$locale.'/LC_MESSAGES/'.$tcl->token->token_domain->key.'.po');
	my $intro = << "EOF";
# Autogenerated by $ref
# language: $lang
# locale: $locale
# time: $time
#
msgid ""
msgstr ""
"Project-Id-Version: DuckDuckGo-Translation-0.000\\n"
"Last-Translator: Community\\n"
"Language-Team: DuckDuckGo Community <community\@duckduckgo.com>\\n"
"POT-Creation-Date: 2009-06-14 09:29-0400\\n"
"PO-Revision-Date: 2009-06-14 09:29-0400\\n"
"Language: $locale\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: $plural_forms\\n"

EOF
	$intro > $file;
	for ($token_domain_language->search_related('token_languages')->all) {
		$_->auto_use if ($self->auto && !$_->msgstr0);
		$_->gettext_snippet($self->fallback) >> $file;
	}
}

sub error { die "[".(ref shift)."] ".shift }

1;